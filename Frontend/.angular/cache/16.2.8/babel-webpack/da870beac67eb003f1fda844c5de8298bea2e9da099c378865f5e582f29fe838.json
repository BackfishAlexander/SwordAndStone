{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nexport let CreateCharacterModalComponent = class CreateCharacterModalComponent {\n  // The isModalOpen property should be public to be accessible from the template\n  closeModal() {\n    this.close.emit(); // This will emit an event that the parent listens for to close the modal\n  }\n  // Make sure to import and inject the CharacterService correctly\n  constructor(characterService, cookieService, route) {\n    this.characterService = characterService;\n    this.cookieService = cookieService;\n    this.route = route;\n    this.close = new EventEmitter();\n    this.characterForm = new FormGroup({\n      characterName: new FormControl('', Validators.required),\n      characterDescription: new FormControl('', Validators.required),\n      characterImageURL: new FormControl('', Validators.required)\n    });\n  }\n  // The onSubmit method\n  onSubmit() {\n    // Include the username in the form data\n    this.route.params.subscribe(params => {\n      this.campaignId = params['id']; // Get the id from the route parameter\n      const formData = {\n        ...this.characterForm.value,\n        username: this.cookieService.get('username'),\n        campaignId: params['id']\n      };\n      if (this.characterForm.valid) {\n        this.characterService.createCharacter(formData).subscribe(response => {\n          console.log('Character created:', response);\n        }, error => {\n          console.error('Error creating character:', error);\n        });\n      }\n    });\n  }\n};\n__decorate([Output()], CreateCharacterModalComponent.prototype, \"close\", void 0);\nCreateCharacterModalComponent = __decorate([Component({\n  selector: 'app-create-character-modal',\n  templateUrl: './create-character-modal.component.html',\n  styleUrls: ['./create-character-modal.component.css']\n})], CreateCharacterModalComponent);","map":{"version":3,"names":["Component","EventEmitter","Output","FormGroup","FormControl","Validators","CreateCharacterModalComponent","closeModal","close","emit","constructor","characterService","cookieService","route","characterForm","characterName","required","characterDescription","characterImageURL","onSubmit","params","subscribe","campaignId","formData","value","username","get","valid","createCharacter","response","console","log","error","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/alex/Documents/Programs/SwordInStone/Frontend/src/app/create-character-modal/create-character-modal.component.ts"],"sourcesContent":["import { Component, EventEmitter, Output, Input } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { CharacterService } from '../services/character.service'; // Adjust the import path as needed\nimport { CookieService } from 'ngx-cookie-service'; // Import CookieService\n\n\n\n@Component({\n  selector: 'app-create-character-modal',\n  templateUrl: './create-character-modal.component.html',\n  styleUrls: ['./create-character-modal.component.css']\n})\nexport class CreateCharacterModalComponent {\n  @Output() close = new EventEmitter<void>();\n  // The isModalOpen property should be public to be accessible from the template\n\n\n  closeModal(): void {\n    this.close.emit(); // This will emit an event that the parent listens for to close the modal\n  }\n  \n  characterForm = new FormGroup({\n    characterName: new FormControl('', Validators.required),\n    characterDescription: new FormControl('', Validators.required),\n    characterImageURL: new FormControl('', Validators.required)\n  });\n\n  // Make sure to import and inject the CharacterService correctly\n  constructor(private characterService: CharacterService, private cookieService: CookieService, private route: ActivatedRoute) {}\n\n  // The onSubmit method\n  onSubmit(): void {\n\n      // Include the username in the form data\n      this.route.params.subscribe(params => {\n        this.campaignId = params['id']; // Get the id from the route parameter\n      const formData = {\n        ...this.characterForm.value,\n        username: this.cookieService.get('username'),\n        campaignId: params['id'];\n      };\n\n    if (this.characterForm.valid) {\n      this.characterService.createCharacter(formData).subscribe(\n        response => {\n          console.log('Character created:', response);\n        },\n        error => {\n          console.error('Error creating character:', error);\n        }\n      );\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,MAAM,QAAe,eAAe;AACtE,SAASC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAW5D,WAAMC,6BAA6B,GAAnC,MAAMA,6BAA6B;EAExC;EAGAC,UAAUA,CAAA;IACR,IAAI,CAACC,KAAK,CAACC,IAAI,EAAE,CAAC,CAAC;EACrB;EAQA;EACAC,YAAoBC,gBAAkC,EAAUC,aAA4B,EAAUC,KAAqB;IAAvG,KAAAF,gBAAgB,GAAhBA,gBAAgB;IAA4B,KAAAC,aAAa,GAAbA,aAAa;IAAyB,KAAAC,KAAK,GAALA,KAAK;IAfjG,KAAAL,KAAK,GAAG,IAAIP,YAAY,EAAQ;IAQ1C,KAAAa,aAAa,GAAG,IAAIX,SAAS,CAAC;MAC5BY,aAAa,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACW,QAAQ,CAAC;MACvDC,oBAAoB,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACW,QAAQ,CAAC;MAC9DE,iBAAiB,EAAE,IAAId,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACW,QAAQ;KAC3D,CAAC;EAG4H;EAE9H;EACAG,QAAQA,CAAA;IAEJ;IACA,IAAI,CAACN,KAAK,CAACO,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MACnC,IAAI,CAACE,UAAU,GAAGF,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;MAClC,MAAMG,QAAQ,GAAG;QACf,GAAG,IAAI,CAACT,aAAa,CAACU,KAAK;QAC3BC,QAAQ,EAAE,IAAI,CAACb,aAAa,CAACc,GAAG,CAAC,UAAU,CAAC;QAC5CJ,UAAU,EAAEF,MAAM,CAAC,IAAI;OACxB;MAEH,IAAI,IAAI,CAACN,aAAa,CAACa,KAAK,EAAE;QAC5B,IAAI,CAAChB,gBAAgB,CAACiB,eAAe,CAACL,QAAQ,CAAC,CAACF,SAAS,CACvDQ,QAAQ,IAAG;UACTC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,QAAQ,CAAC;QAC7C,CAAC,EACDG,KAAK,IAAG;UACNF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACnD,CAAC,CACF;;IAEL,CAAC;EACH;CAAC;AAxCWC,UAAA,EAAT/B,MAAM,EAAE,C,2DAAkC;AADhCI,6BAA6B,GAAA2B,UAAA,EALzCjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,4BAA4B;EACtCC,WAAW,EAAE,yCAAyC;EACtDC,SAAS,EAAE,CAAC,wCAAwC;CACrD,CAAC,C,EACW9B,6BAA6B,CAyCzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}