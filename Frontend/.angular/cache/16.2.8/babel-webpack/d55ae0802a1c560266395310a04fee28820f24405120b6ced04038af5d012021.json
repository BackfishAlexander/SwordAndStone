{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { jwtDecode } from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthenticationService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.backendIP = \"192.168.68.105\";\n    this.headers = \"\";\n    this.loginEvent = new EventEmitter();\n  }\n  getTokenDetails() {\n    try {\n      const decodedToken = jwtDecode(this.getToken());\n      console.log(decodedToken);\n      return decodedToken;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  }\n  login(username, password) {\n    const payload = {\n      username: username,\n      password: password\n    };\n    return new Promise((resolve, reject) => {\n      this.http.post('http://' + this.getBackendIP() + ':8080/login', payload, {\n        responseType: 'json'\n      }).subscribe(response => {\n        console.log('Login successful!', response);\n        this.setToken(response.token);\n        this.loginEvent.emit(true);\n        resolve(true);\n      }, error => {\n        console.error('Login failed!', error);\n        reject(false);\n      });\n    });\n  }\n  register(username, password) {\n    const payload = {\n      username: username,\n      password: password\n    };\n    return new Promise((resolve, reject) => {\n      this.http.post('http://' + this.getBackendIP() + ':8080/register', payload, {\n        responseType: 'json'\n      }).subscribe(response => {\n        console.log('Registration successful!', response);\n        this.setToken(response.token);\n        this.loginEvent.emit(true);\n        resolve(true);\n      }, error => {\n        console.error('Registration failed!', error);\n        reject(false);\n      });\n    });\n  }\n  deleteRequest(URL) {\n    if (!URL.startsWith(\"/\")) {\n      URL = \"/\" + URL;\n    }\n    return new Promise((resolve, reject) => {\n      this.http.delete('http://' + this.getBackendIP() + ':8080' + URL, {\n        headers: this.getHeaders(),\n        responseType: 'json'\n      }).subscribe(response => {\n        console.log('Delete Request successful!', response);\n        resolve(true);\n      }, error => {\n        console.error('Delete failed!', error);\n        reject(false);\n      });\n    });\n  }\n  postRequest(URL, payload) {\n    if (!URL.startsWith(\"/\")) {\n      URL = \"/\" + URL;\n    }\n    return new Promise((resolve, reject) => {\n      this.http.post('http://' + this.getBackendIP() + ':8080' + URL, payload, {\n        headers: this.getHeaders(),\n        responseType: 'text'\n      }).subscribe(response => {\n        console.log('Post Request successful!', response);\n        resolve(true);\n      }, error => {\n        console.error('Post Request failed!', error);\n        reject(false);\n      });\n    });\n  }\n  getToken() {\n    let token = localStorage.getItem('token');\n    if (typeof token === 'string') {\n      return token;\n    } else {\n      return \"\";\n    }\n  }\n  getUsername() {\n    let details = this.getTokenDetails();\n    if (details != null) {\n      let u = details.sub;\n      if (u != undefined) {\n        return u;\n      }\n    }\n    return \"\";\n  }\n  getId() {\n    let details = this.getTokenDetails();\n    if (details != null) {\n      let customDetails = details; // Type assertion\n      let userId = customDetails.userId;\n      if (userId !== undefined) {\n        return userId;\n      }\n    }\n    return \"\";\n  }\n  isLoggedIn() {\n    return this.getToken() !== \"\";\n  }\n  logout() {\n    this.setToken(\"\");\n    this.loginEvent.emit(false);\n    this.router.navigate(['/login']);\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getHeaders() {\n    return new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\n  }\n  getBackendIP() {\n    return this.backendIP;\n  }\n  static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","EventEmitter","jwtDecode","AuthenticationService","constructor","http","router","backendIP","headers","loginEvent","getTokenDetails","decodedToken","getToken","console","log","error","login","username","password","payload","Promise","resolve","reject","post","getBackendIP","responseType","subscribe","response","setToken","token","emit","register","deleteRequest","URL","startsWith","delete","getHeaders","postRequest","localStorage","getItem","getUsername","details","u","sub","undefined","getId","customDetails","userId","isLoggedIn","logout","navigate","setItem","set","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["/Users/alex/Documents/Programs/SwordInStone/Frontend/src/app/services/authentication.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { RegistrationResponse } from '../DTOs/RegistrationResponse';\nimport { Router } from '@angular/router';\nimport { jwtDecode } from \"jwt-decode\";\n\ninterface CustomJwtPayload {\n  sub: string;  // Standard JWT fields\n  // ... other standard fields you might use\n  userId: string;  // Your custom field\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n  private backendIP: String = \"192.168.68.105\";\n  private token: any;\n  private headers: String = \"\";\n  public loginEvent = new EventEmitter<boolean>();\n\n  constructor(private http: HttpClient,\n    private router: Router,\n    ) {\n  }\n\n  getTokenDetails() {\n    try {\n      const decodedToken = jwtDecode(this.getToken());\n      console.log(decodedToken);\n      return decodedToken;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  }\n\n  login(username: String, password: String): Promise<boolean> {\n    const payload = {\n      username: username,\n      password: password\n    };\n  \n    return new Promise((resolve, reject) => {\n      this.http.post<RegistrationResponse>('http://' + this.getBackendIP() + ':8080/login', payload, { responseType: 'json' })\n        .subscribe(response => {\n          console.log('Login successful!', response);\n          this.setToken(response.token);\n          this.loginEvent.emit(true);\n          resolve(true);\n        }, error => {\n          console.error('Login failed!', error);\n          reject(false);\n        });\n    });\n  }\n\n  \n  register(username: String, password: String) {\n    const payload = {\n      username: username,\n      password: password\n    };\n\n    return new Promise((resolve, reject) => { this.http.post<RegistrationResponse>('http://' + this.getBackendIP() + ':8080/register', payload, { responseType: 'json' }).subscribe(response => {\n      console.log('Registration successful!', response);\n        this.setToken(response.token);\n        this.loginEvent.emit(true);\n        resolve(true);\n      }, error => {\n        console.error('Registration failed!', error);\n        reject(false);\n      });\n    });\n  } \n\n  deleteRequest(URL: String) {\n    if (!URL.startsWith(\"/\")) {\n      URL = \"/\" + URL;\n    }\n\n    return new Promise((resolve, reject) => { this.http.delete('http://' + this.getBackendIP() + ':8080' + URL, { headers: this.getHeaders(), responseType: 'json'}).subscribe(response => {\n        console.log('Delete Request successful!', response);\n        resolve(true);\n      }, error => {\n        console.error('Delete failed!', error);\n        reject(false);\n      });\n    });\n  }\n\n  postRequest(URL: String, payload: any) {\n    if (!URL.startsWith(\"/\")) {\n      URL = \"/\" + URL;\n    }\n\n    return new Promise((resolve, reject) => { this.http.post('http://' + this.getBackendIP() + ':8080' + URL, payload, { headers: this.getHeaders(), responseType: 'text'}).subscribe(response => {\n        console.log('Post Request successful!', response);\n        resolve(true);\n      }, error => {\n        console.error('Post Request failed!', error);\n        reject(false);\n      });\n    });\n  }\n\n  public getToken() {\n    let token = localStorage.getItem('token');\n    if (typeof token === 'string') {\n      return token\n    }\n    else {\n      return \"\";\n    }\n  }\n\n  public getUsername(): string {\n    let details = this.getTokenDetails();\n    if (details != null) {\n      let u = details.sub;\n      if (u != undefined) {\n        return u;\n      }\n    }\n    return \"\";\n  }\n\n  public getId(): string {\n    let details = this.getTokenDetails();\n    if (details != null) {\n      let customDetails = details as CustomJwtPayload; // Type assertion\n      let userId = customDetails.userId;\n      if (userId !== undefined) {\n        return userId;\n      }\n    }\n    return \"\";\n  }\n\n  public isLoggedIn() {\n    return this.getToken() !== \"\"\n  }\n\n  public logout() {\n    this.setToken(\"\");\n    this.loginEvent.emit(false);\n    this.router.navigate(['/login']);\n  }\n\n  private setToken(token: any) {\n    localStorage.setItem('token',token);\n  }\n\n  public getHeaders() {\n    return new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\n  }\n\n  public getBackendIP() {\n    return this.backendIP;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}