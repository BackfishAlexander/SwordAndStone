{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationService {\n  constructor(http) {\n    this.http = http;\n    this.token = \"\";\n  }\n  login(username, password) {\n    const payload = {\n      username: username,\n      password: password\n    };\n    this.http.post('http://localhost:8080/login', payload, {\n      responseType: 'json'\n    }).subscribe(response => {\n      console.log('Login successful!', response);\n    }, error => {\n      console.error('Login failed!', error);\n    });\n  }\n  register(username, password) {\n    const payload = {\n      username: username,\n      password: password\n    };\n    this.http.post('http://localhost:8080/register', payload, {\n      responseType: 'json'\n    }).subscribe(response => {\n      console.log('Registration successful!', response);\n      this.token = response.token;\n    }, error => {\n      console.error('Registration failed!', error);\n    });\n  }\n  getToken() {\n    return this.token;\n  }\n  static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthenticationService","constructor","http","token","login","username","password","payload","post","responseType","subscribe","response","console","log","error","register","getToken","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/alex/Documents/Programs/SwordInStone/Frontend/src/app/services/authentication.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { RegistrationResponse } from '../DTOs/RegistrationResponse';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n  private token: String;\n\n  constructor(private http: HttpClient) {\n    this.token = \"\";\n   }\n\n  login(username: String, password: String) {\n    const payload = {\n      username: username,\n      password: password\n    };\n\n    this.http.post<RegistrationResponse>('http://localhost:8080/login', payload, { responseType: 'json' }).subscribe(response => {\n      console.log('Login successful!', response);\n    }, error => {\n      console.error('Login failed!', error);\n    });\n  }\n\n  \n  register(username: String, password: String) {\n    const payload = {\n      username: username,\n      password: password\n    };\n\n    this.http.post<RegistrationResponse>('http://localhost:8080/register', payload, { responseType: 'json' }).subscribe(response => {\n      console.log('Registration successful!', response);\n      this.token = response.token;\n    }, error => {\n      console.error('Registration failed!', error);\n    });\n  }\n\n  public getToken() {\n    return this.token;\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,qBAAqB;EAGhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACtB,IAAI,CAACC,KAAK,GAAG,EAAE;EAChB;EAEDC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,MAAMC,OAAO,GAAG;MACdF,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEA;KACX;IAED,IAAI,CAACJ,IAAI,CAACM,IAAI,CAAuB,6BAA6B,EAAED,OAAO,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC,CAACC,SAAS,CAACC,QAAQ,IAAG;MAC1HC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,QAAQ,CAAC;IAC5C,CAAC,EAAEG,KAAK,IAAG;MACTF,OAAO,CAACE,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC,CAAC,CAAC;EACJ;EAGAC,QAAQA,CAACV,QAAgB,EAAEC,QAAgB;IACzC,MAAMC,OAAO,GAAG;MACdF,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEA;KACX;IAED,IAAI,CAACJ,IAAI,CAACM,IAAI,CAAuB,gCAAgC,EAAED,OAAO,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC,CAACC,SAAS,CAACC,QAAQ,IAAG;MAC7HC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,QAAQ,CAAC;MACjD,IAAI,CAACR,KAAK,GAAGQ,QAAQ,CAACR,KAAK;IAC7B,CAAC,EAAEW,KAAK,IAAG;MACTF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACJ;EAEOE,QAAQA,CAAA;IACb,OAAO,IAAI,CAACb,KAAK;EACnB;EAAC,QAAAc,CAAA,G;qBArCUjB,qBAAqB,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAArBtB,qBAAqB;IAAAuB,OAAA,EAArBvB,qBAAqB,CAAAwB,IAAA;IAAAC,UAAA,EAFpB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}