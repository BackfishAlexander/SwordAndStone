{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationService {\n  constructor(http) {\n    this.http = http;\n    this.headers = \"\";\n  }\n  login(username, password) {\n    const payload = {\n      username: username,\n      password: password\n    };\n    this.http.post('http://localhost:8080/login', payload, {\n      responseType: 'json'\n    }).subscribe(response => {\n      console.log('Login successful!', response);\n      this.setToken(response.token);\n    }, error => {\n      console.error('Login failed!', error);\n    });\n  }\n  register(username, password) {\n    const payload = {\n      username: username,\n      password: password\n    };\n    this.http.post('http://localhost:8080/register', payload, {\n      responseType: 'json'\n    }).subscribe(response => {\n      console.log('Registration successful!', response);\n      this.setToken(response.token);\n    }, error => {\n      console.error('Registration failed!', error);\n    });\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isLoggedIn() {\n    return this.token !== \"\";\n  }\n  logout() {\n    this.token = \"\";\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getHeaders() {\n    return new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\n  }\n  static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","AuthenticationService","constructor","http","headers","login","username","password","payload","post","responseType","subscribe","response","console","log","setToken","token","error","register","getToken","localStorage","getItem","isLoggedIn","logout","setItem","getHeaders","set","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/alex/Documents/Programs/SwordInStone/Frontend/src/app/services/authentication.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { RegistrationResponse } from '../DTOs/RegistrationResponse';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n  private token: any;\n  private headers: String = \"\";\n\n  constructor(private http: HttpClient) {\n   }\n\n  login(username: String, password: String) {\n    const payload = {\n      username: username,\n      password: password\n    };\n\n    this.http.post<RegistrationResponse>('http://localhost:8080/login', payload, { responseType: 'json' }).subscribe(response => {\n      console.log('Login successful!', response);\n      this.setToken(response.token);\n    }, error => {\n      console.error('Login failed!', error);\n    });\n  }\n\n  \n  register(username: String, password: String) {\n    const payload = {\n      username: username,\n      password: password\n    };\n\n    this.http.post<RegistrationResponse>('http://localhost:8080/register', payload, { responseType: 'json' }).subscribe(response => {\n      console.log('Registration successful!', response);\n      this.setToken(response.token);\n    }, error => {\n      console.error('Registration failed!', error);\n    });\n  }\n\n  public getToken() {\n    return localStorage.getItem('token');\n  }\n\n  public isLoggedIn() {\n    return this.token !== \"\"\n  }\n\n  public logout() {\n    this.token = \"\";\n  }\n\n  private setToken(token: any) {\n    localStorage.setItem('token',token);\n  }\n\n  public getHeaders() {\n    return new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\n  }\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAO9D,OAAM,MAAOC,qBAAqB;EAIhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAW,EAAE;EAG3B;EAEDC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,MAAMC,OAAO,GAAG;MACdF,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEA;KACX;IAED,IAAI,CAACJ,IAAI,CAACM,IAAI,CAAuB,6BAA6B,EAAED,OAAO,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC,CAACC,SAAS,CAACC,QAAQ,IAAG;MAC1HC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,QAAQ,CAAC;MAC1C,IAAI,CAACG,QAAQ,CAACH,QAAQ,CAACI,KAAK,CAAC;IAC/B,CAAC,EAAEC,KAAK,IAAG;MACTJ,OAAO,CAACI,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC,CAAC,CAAC;EACJ;EAGAC,QAAQA,CAACZ,QAAgB,EAAEC,QAAgB;IACzC,MAAMC,OAAO,GAAG;MACdF,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEA;KACX;IAED,IAAI,CAACJ,IAAI,CAACM,IAAI,CAAuB,gCAAgC,EAAED,OAAO,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC,CAACC,SAAS,CAACC,QAAQ,IAAG;MAC7HC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,QAAQ,CAAC;MACjD,IAAI,CAACG,QAAQ,CAACH,QAAQ,CAACI,KAAK,CAAC;IAC/B,CAAC,EAAEC,KAAK,IAAG;MACTJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACJ;EAEOE,QAAQA,CAAA;IACb,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEOC,UAAUA,CAAA;IACf,OAAO,IAAI,CAACN,KAAK,KAAK,EAAE;EAC1B;EAEOO,MAAMA,CAAA;IACX,IAAI,CAACP,KAAK,GAAG,EAAE;EACjB;EAEQD,QAAQA,CAACC,KAAU;IACzBI,YAAY,CAACI,OAAO,CAAC,OAAO,EAACR,KAAK,CAAC;EACrC;EAEOS,UAAUA,CAAA;IACf,OAAO,IAAIzB,WAAW,EAAE,CAAC0B,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACP,QAAQ,EAAE,EAAE,CAAC;EAC5E;EAAC,QAAAQ,CAAA,G;qBAtDU1B,qBAAqB,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAArB/B,qBAAqB;IAAAgC,OAAA,EAArBhC,qBAAqB,CAAAiC,IAAA;IAAAC,UAAA,EAFpB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}