{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { jwtDecode } from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthenticationService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.headers = \"\";\n    this.loginEvent = new EventEmitter();\n  }\n  getTokenDetails() {\n    try {\n      const decodedToken = jwtDecode(this.getToken());\n      return decodedToken;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  }\n  login(username, password) {\n    const payload = {\n      username: username,\n      password: password\n    };\n    return new Promise((resolve, reject) => {\n      this.http.post('http://localhost:8080/login', payload, {\n        responseType: 'json'\n      }).subscribe(response => {\n        console.log('Login successful!', response);\n        this.setToken(response.token);\n        this.loginEvent.emit(true);\n        resolve(true);\n      }, error => {\n        console.error('Login failed!', error);\n        reject(false);\n      });\n    });\n  }\n  register(username, password) {\n    const payload = {\n      username: username,\n      password: password\n    };\n    return new Promise((resolve, reject) => {\n      this.http.post('http://localhost:8080/register', payload, {\n        responseType: 'json'\n      }).subscribe(response => {\n        console.log('Registration successful!', response);\n        this.setToken(response.token);\n        this.loginEvent.emit(true);\n        resolve(true);\n      }, error => {\n        console.error('Registration failed!', error);\n        reject(false);\n      });\n    });\n  }\n  getToken() {\n    let token = localStorage.getItem('token');\n    if (typeof token === 'string') {\n      return token;\n    } else {\n      return \"\";\n    }\n  }\n  getUsername() {\n    let details = this.getTokenDetails();\n    return details.sub;\n  }\n  isLoggedIn() {\n    return this.getToken() !== \"\";\n  }\n  logout() {\n    this.setToken(\"\");\n    this.loginEvent.emit(false);\n    this.router.navigate(['/login']);\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getHeaders() {\n    return new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\n  }\n  static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","EventEmitter","jwtDecode","AuthenticationService","constructor","http","router","headers","loginEvent","getTokenDetails","decodedToken","getToken","error","console","login","username","password","payload","Promise","resolve","reject","post","responseType","subscribe","response","log","setToken","token","emit","register","localStorage","getItem","getUsername","details","sub","isLoggedIn","logout","navigate","setItem","getHeaders","set","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["/Users/alex/Documents/Programs/SwordInStone/Frontend/src/app/services/authentication.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { RegistrationResponse } from '../DTOs/RegistrationResponse';\nimport { Router } from '@angular/router';\nimport { jwtDecode } from \"jwt-decode\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n  private token: any;\n  private headers: String = \"\";\n  public loginEvent = new EventEmitter<boolean>();\n\n  constructor(private http: HttpClient,\n    private router: Router,\n    ) {\n  }\n\n  getTokenDetails() {\n    try {\n      const decodedToken = jwtDecode(this.getToken());\n      return decodedToken;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  }\n\n  login(username: String, password: String): Promise<boolean> {\n    const payload = {\n      username: username,\n      password: password\n    };\n  \n    return new Promise((resolve, reject) => {\n      this.http.post<RegistrationResponse>('http://localhost:8080/login', payload, { responseType: 'json' })\n        .subscribe(response => {\n          console.log('Login successful!', response);\n          this.setToken(response.token);\n          this.loginEvent.emit(true);\n          resolve(true);\n        }, error => {\n          console.error('Login failed!', error);\n          reject(false);\n        });\n    });\n  }\n\n  \n  register(username: String, password: String) {\n    const payload = {\n      username: username,\n      password: password\n    };\n\n    return new Promise((resolve, reject) => { this.http.post<RegistrationResponse>('http://localhost:8080/register', payload, { responseType: 'json' }).subscribe(response => {\n      console.log('Registration successful!', response);\n        this.setToken(response.token);\n        this.loginEvent.emit(true);\n        resolve(true);\n      }, error => {\n        console.error('Registration failed!', error);\n        reject(false);\n      });\n    });\n  } \n\n  public getToken() {\n    let token = localStorage.getItem('token');\n    if (typeof token === 'string') {\n      return token\n    }\n    else {\n      return \"\";\n    }\n  }\n\n  public getUsername() {\n    let details = this.getTokenDetails();\n    return details.sub;\n  }\n\n  public isLoggedIn() {\n    return this.getToken() !== \"\"\n  }\n\n  public logout() {\n    this.setToken(\"\");\n    this.loginEvent.emit(false);\n    this.router.navigate(['/login']);\n  }\n\n  private setToken(token: any) {\n    localStorage.setItem('token',token);\n  }\n\n  public getHeaders() {\n    return new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}