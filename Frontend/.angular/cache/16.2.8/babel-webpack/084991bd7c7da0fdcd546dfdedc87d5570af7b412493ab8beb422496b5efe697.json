{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nexport let CreateCharacterModalComponent = class CreateCharacterModalComponent {\n  constructor() {\n    this.close = new EventEmitter();\n    this.characterForm = new FormGroup({\n      characterName: new FormControl('', Validators.required),\n      characterDescription: new FormControl('', Validators.required),\n      characterImageURL: new FormControl('', Validators.required)\n    });\n  }\n  // The isModalOpen property should be public to be accessible from the template\n  closeModal() {\n    this.close.emit(); // This will emit an event that the parent listens for to close the modal\n  }\n};\n\n__decorate([Output()], CreateCharacterModalComponent.prototype, \"close\", void 0);\nCreateCharacterModalComponent = __decorate([Component({\n  selector: 'app-create-character-modal',\n  templateUrl: './create-character-modal.component.html',\n  styleUrls: ['./create-character-modal.component.css']\n})], CreateCharacterModalComponent);\n() => {\n  const username = this.cookieService.get('username');\n  // Include the username in the form data\n  const formData = {\n    ...this.characterForm.value,\n    username: username\n  };\n  if (this.characterForm.valid) {\n    this.characterService.createCharacter(this.characterForm.value).subscribe(response => {\n      console.log('Character created:', response);\n    }, error => {\n      console.error('Error creating character:', error);\n    });\n  }\n};","map":{"version":3,"names":["Component","EventEmitter","Output","FormGroup","FormControl","Validators","CreateCharacterModalComponent","constructor","close","characterForm","characterName","required","characterDescription","characterImageURL","closeModal","emit","__decorate","selector","templateUrl","styleUrls","username","cookieService","get","formData","value","valid","characterService","createCharacter","subscribe","response","console","log","error"],"sources":["/Users/alex/Documents/Programs/SwordInStone/Frontend/src/app/create-character-modal/create-character-modal.component.ts"],"sourcesContent":["import { Component, EventEmitter, Output, Input } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { CharacterService } from '../services/character.service'; // Adjust the import path as needed\nimport { CookieService } from 'ngx-cookie-service'; // Import CookieService\n\n\n\n@Component({\n  selector: 'app-create-character-modal',\n  templateUrl: './create-character-modal.component.html',\n  styleUrls: ['./create-character-modal.component.css']\n})\nexport class CreateCharacterModalComponent {\n\n  @Output() close = new EventEmitter<void>();\n  // The isModalOpen property should be public to be accessible from the template\n\n\n  closeModal(): void {\n    this.close.emit(); // This will emit an event that the parent listens for to close the modal\n  }\n  \n  characterForm = new FormGroup({\n    characterName: new FormControl('', Validators.required),\n    characterDescription: new FormControl('', Validators.required),\n    characterImageURL: new FormControl('', Validators.required)\n  });\n\n  // Make sure to import and inject the CharacterService correctly\n  constructor(private characterService: CharacterService, private cookieService: CookieService // Inject CookieService) {}\n\n  // The onSubmit method\n  onSubmit(): void {\n\n    const username = this.cookieService.get('username');\n\n      // Include the username in the form data\n      const formData = {\n        ...this.characterForm.value,\n        username: username\n      };\n\n    if (this.characterForm.valid) {\n      this.characterService.createCharacter(this.characterForm.value).subscribe(\n        response => {\n          console.log('Character created:', response);\n        },\n        error => {\n          console.error('Error creating character:', error);\n        }\n      );\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,MAAM,QAAe,eAAe;AACtE,SAASC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAW5D,WAAMC,6BAA6B,GAAnC,MAAMA,6BAA6B;EAAnCC,YAAA;IAEK,KAAAC,KAAK,GAAG,IAAIP,YAAY,EAAQ;IAQ1C,KAAAQ,aAAa,GAAG,IAAIN,SAAS,CAAC;MAC5BO,aAAa,EAAE,IAAIN,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACM,QAAQ,CAAC;MACvDC,oBAAoB,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACM,QAAQ,CAAC;MAC9DE,iBAAiB,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACM,QAAQ;KAC3D,CAAC;EAMM;EAjBR;EAGAG,UAAUA,CAAA;IACR,IAAI,CAACN,KAAK,CAACO,IAAI,EAAE,CAAC,CAAC;EACrB;CAYQ;;AAlBEC,UAAA,EAATd,MAAM,EAAE,C,2DAAkC;AAFhCI,6BAA6B,GAAAU,UAAA,EALzChB,SAAS,CAAC;EACTiB,QAAQ,EAAE,4BAA4B;EACtCC,WAAW,EAAE,yCAAyC;EACtDC,SAAS,EAAE,CAAC,wCAAwC;CACrD,CAAC,C,EACWb,6BAA6B,CAoBhC;AAAA,MAAQ;EAEd,MAAMc,QAAQ,GAAG,IAAI,CAACC,aAAa,CAACC,GAAG,CAAC,UAAU,CAAC;EAEjD;EACA,MAAMC,QAAQ,GAAG;IACf,GAAG,IAAI,CAACd,aAAa,CAACe,KAAK;IAC3BJ,QAAQ,EAAEA;GACX;EAEH,IAAI,IAAI,CAACX,aAAa,CAACgB,KAAK,EAAE;IAC5B,IAAI,CAACC,gBAAgB,CAACC,eAAe,CAAC,IAAI,CAAClB,aAAa,CAACe,KAAK,CAAC,CAACI,SAAS,CACvEC,QAAQ,IAAG;MACTC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,QAAQ,CAAC;IAC7C,CAAC,EACDG,KAAK,IAAG;MACNF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD,CAAC,CACF;;AAEL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}